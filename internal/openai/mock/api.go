// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	openai "github.com/sashabaranov/go-openai"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// BuildRequest provides a mock function with given fields: systemPrompts, userPrompts, assistantPrompt
func (_m *API) BuildRequest(systemPrompts []string, userPrompts []string, assistantPrompt []string) openai.ChatCompletionRequest {
	ret := _m.Called(systemPrompts, userPrompts, assistantPrompt)

	if len(ret) == 0 {
		panic("no return value specified for BuildRequest")
	}

	var r0 openai.ChatCompletionRequest
	if rf, ok := ret.Get(0).(func([]string, []string, []string) openai.ChatCompletionRequest); ok {
		r0 = rf(systemPrompts, userPrompts, assistantPrompt)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionRequest)
	}

	return r0
}

// GetBaseURL provides a mock function with no fields
func (_m *API) GetBaseURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Models provides a mock function with given fields: ctx
func (_m *API) Models(ctx context.Context) ([]openai.Model, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Models")
	}

	var r0 []openai.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]openai.Model, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []openai.Model); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]openai.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRequest provides a mock function with given fields: ctx, request
func (_m *API) SendRequest(ctx context.Context, request openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SendRequest")
	}

	var r0 openai.ChatCompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) openai.ChatCompletionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, openai.ChatCompletionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
