// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OpenAIService is an autogenerated mock type for the OpenAIService type
type OpenAIService struct {
	mock.Mock
}

// GenerateConfig provides a mock function with given fields: ctx, format, message
func (_m *OpenAIService) GenerateConfig(ctx context.Context, format string, message string) (string, error) {
	ret := _m.Called(ctx, format, message)

	if len(ret) == 0 {
		panic("no return value specified for GenerateConfig")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, format, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, format, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, format, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *OpenAIService) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegenerateConfig provides a mock function with given fields: ctx, format, oldConfig, errMessage, contextMessages
func (_m *OpenAIService) RegenerateConfig(ctx context.Context, format string, oldConfig string, errMessage string, contextMessages ...string) (string, error) {
	_va := make([]interface{}, len(contextMessages))
	for _i := range contextMessages {
		_va[_i] = contextMessages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, format, oldConfig, errMessage)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateConfig")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...string) (string, error)); ok {
		return rf(ctx, format, oldConfig, errMessage, contextMessages...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...string) string); ok {
		r0 = rf(ctx, format, oldConfig, errMessage, contextMessages...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...string) error); ok {
		r1 = rf(ctx, format, oldConfig, errMessage, contextMessages...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenAIService creates a new instance of OpenAIService. It also registers a testing interface on the mock and a cleanup function to assert the mock expectations.
// The first argument is typically a *testing.T value.
func NewOpenAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAIService {
	mock := &OpenAIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
